"js/Scaffold, vcl/Factory, entities/ExpressionBuilder, js/Scaffold!entities, vcl/Factory!ui/entities/AttributeInput.boolean,vcl/Factory!ui/entities/AttributeInput.date,vcl/Factory!ui/entities/AttributeInput.double,vcl/Factory!ui/entities/AttributeInput.int,vcl/Factory!ui/entities/AttributeInput.long,vcl/Factory!ui/entities/AttributeInput.ref,vcl/Factory!ui/entities/AttributeInput.scaffold,vcl/Factory!ui/entities/AttributeInput.set,vcl/Factory!ui/entities/AttributeInput.string,vcl/Factory!ui/entities/AttributeInput.text,vcl/Factory!ui/entities/AttributeInput.timestamp";

var BASE = "vcl/Factory!ui/entities/AttributeInput";

var scaffold = require("js/Scaffold!entities");
var EB = require("entities/ExpressionBuilder");
var Factory = require("vcl/Factory");

function respectPropertyValue(scope, name, obj, key, _undefined) {
	name = name.split(".");
	if(scope[name[0]].hasPropertyValue(name[1])) {
		obj = obj || {};
		return (obj[key || name[1]] = scope[name[0]]
			.getPropertyValue(name[1]));
	}
	return _undefined;
}
function createParamAccessorFor(me, name) {
    return function() {
        /*- Autogenerated */
        return me.getParam(name);
    };
}
function onGetRequestCriteria(filters, criteria) {
	var exprs = this._owner.qsa("< #filters < #input").map(function(input) {
		var value = input.getValue();
		var attribute = input.getVar("attribute");
		var type = input.getVar("type");
		
		return EB[type](attribute, value);
	});
	
	if(exprs.length === 1) {
		criteria.where = exprs[0];
	} else if(exprs.length > 1) {
		criteria.where = EB.and.apply(EB, exprs);
	}
	
	return criteria;
}

$([], {
	
	'@scaffold': function() {
		var scope = this.scope();
		var specializer = this.getSpecializer(true);
        var info = this.getUriInfo();
	    var me = this;
	    
console.log("@scaffold#" + this.hashCode(), this._uri, specializer, this);
	    
		/* FIXME Accessing privates */
	    scaffold._context = {entity: specializer};
		    
	    var className; /* TODO can be perfectly undefined though */
		var obj = scaffold.getObject(
			String.format("%s.views.ui/entities/Query%s", 
				specializer, 
				className !== undefined ? ("." + className) : ""), 
			"entity,attributes,where,groupBy,having,orderBy,count," + 
				"columns,filters,newInstance,onGetRequestCriteria," + 
				"onGetAttributeValue");
					
		function description() {
			if(!scope.description.hasPropertyValue("content")) {
				// var name = scaffold.getf("%s.noun.plural", specializer);
				var desc = scaffold.getf("%s.description.plural", specializer);
				desc = String.format("%H", desc);
				// TODO Component.prototype.setPropertyValue("description", desc);
				scope.description.setContent(desc);
				js.set("description.@properties.content", 
					scope.description._content, scope);
			}
		}
		function query() {
			/*- Respect overriden property values */					
			respectPropertyValue(scope, "query.entity", obj);
			respectPropertyValue(scope, "query.attributes", obj);
			respectPropertyValue(scope, "query.where", obj);
			respectPropertyValue(scope, "query.groupBy", obj);
			respectPropertyValue(scope, "query.having", obj);
			respectPropertyValue(scope, "query.orderBy", obj);
			respectPropertyValue(scope, "query.count", obj);
			respectPropertyValue(scope, "query.onGetRequestCriteria", obj);
			respectPropertyValue(scope, "query.onGetAttributeValue", obj);

			obj.entity = obj.entity || specializer;

			if(obj.newInstance) {
				scope.item_new.setVar("newInstance", obj.newInstance);
			}

			if(obj.columns) {
				obj.attributes = obj.attributes || obj.columns.map(function(column) {
					return column.attribute;
				});
				
				var attributes = obj.attributes.split(",");
				var columns = obj.columns.split(",");
				if(columns.length === attributes.length) {
					columns.forEach(function(content, index) {
						var column = scope.list.addColumn();
						column.setAttribute(attributes[index]);
						column.setContent(content);
					});
				} else {
					console.warn("Columns and selection do not match");
				}
			} else if(!respectPropertyValue(scope, "list.autoColumns")) {
				scope.list.setAutoColumns(true);
			}

			if(info.specializer_classes.length > 0) {
                var where;
			    info.specializer_classes.forEach(function(cl) {
			        if(cl.indexOf("by:") === 0) {
			            var name = cl.split(":").pop().replace(/\//g, ".");
			            var expr = EB.eq(name, createParamAccessorFor(me, name));
			            if(where !== undefined) {
			                if(where.items[0][0] !== "and") {
			                    where = EB.and(where, expr);
			                } else {
			                    where.items[0][0].push(expr);
			                }
			            } else {
			                where = expr;
			            }
			        }
			    });
			    obj.where = where;
			}
			
			["onGetRequestCriteria", "onGetAttributeValue"].map(function(k) {
				if(typeof obj[k] === "function") {
					scope.query['_' + k] = obj[k];
				}
			});
			
			scope.query.setAll(obj.entity, obj.attributes || "*", obj.where,
					obj.groupBy, obj.having, obj.orderBy, obj.count);
		}
		function columns() {}
		function filters() {
			var factories = obj.filters.map(function(filter) {
				var type = filter.type.split(":").pop();
				return String.format("%s.%s", BASE, type);
			});
			
			scope.query.override({
				/* prevent request while scaffolding */
				isValid: function() {
					function f() {
						var valid = true;
						obj.filters.map(function(filter, i) {
							if(valid === true && filter.required === true) {
								valid = uis[i].qs("#input").hasValue();
							}
						});
						return valid;
					}
					return this.inherited(arguments) && uis.length && f();
				}
			});

			var uis = [];
			obj.filters.map(function(filter) {
				// var name = filter.name || (filter.label || "").toLowerCase();
				var type = filter.type.split(":").pop();
				var factory = require(String.format("%s.%s", BASE, type));
				var ui = factory.newInstance(me, undefined, { 
					loaded: function () {
						/*- block default behaviour */
					} 
				});
				uis.push(ui);
				// filter.name = filter.name || name;
				ui.qs("<#label").setClasses("header");
				ui.qs("<#label").setContent(filter.label);
				ui.qs("<#input").setVars({
					"attribute": filter.attribute,
					"type": filter.type.split(":")[1],
					"operator": filter.type.split(":")[0],
				});
				if(filter.onGetValue) {
					ui.qs("<#input").setVar("onGetValue", filter.onGetValue);
				}
				ui.setParent(scope.filters);
				ui.setName(filter.name || String.format("qf-%s:%s", filter.attribute, filter.type));
			});
			/*- TODO only do this when the call was blocked before (see isValid above) */
			scope.query.requestWhenNeeded();
		}

		this.beginLoading();
		try {
			description();
			query();
			columns();
			obj.filters && filters();
		} finally {
			this.endLoading();
		}
		
		return this.inherited(arguments);
	}

}, []);